/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.texteditor.vistas;

import com.texteditor.utils.HighlightCaret;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.rtf.RTFEditorKit;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

/**
 *
 * @author Administrador
 */
public class TextEditorFrame extends javax.swing.JFrame {

    private JPopupMenu popup;
    private Color colorActual;
    private boolean negritaActivado;
    private boolean cursivaActivado;
    private boolean subrayadoActivado;
    private int tamanhoActual = 10;
    private String fuentaActual;
    private int alineadoActual = StyleConstants.ALIGN_LEFT;
    private File currentDirectory;
    
    private Color defaultBackground;
    /**
     * Creates new form PaneEditarFrame
     */
    public TextEditorFrame() {
        //javax.swing.ImageIcon a = new javax.swing.ImageIcon(getClass().getResource("\\com\\texteditor\\resources\\text16px.png"));
        initComponents();
       
        //diagnosticoEditorPane.setComponentPopupMenu(editorPopupMenu);
        
        try {
            String userDirPath = "C:\\Users\\" + System.getProperty("user.name") + "\\Desktop";
            currentDirectory = new File(userDirPath);
        } catch(Exception ex) {
            currentDirectory = null;
        }
        
        defaultBackground = negritaButton.getBackground();
        editorTextPane.setCaret(new HighlightCaret(editorTextPane.getSelectionColor()));
        procesoProgressBar.setVisible(false);
        colorActual = Color.BLACK;         
        colorButton.setForeground(colorActual);
        if(tamanhoTextoComboBox.getSelectedItem() != null) {
            tamanhoActual = Integer.parseInt(tamanhoTextoComboBox.getSelectedItem().toString());
        }
        cargarFuentes();
        agregarElementoParrafo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorPopupMenu = new javax.swing.JPopupMenu();
        colorMenuItem = new javax.swing.JMenuItem();
        sizeMenu = new javax.swing.JMenu();
        size10MenuItem = new javax.swing.JMenuItem();
        size11MenuItem = new javax.swing.JMenuItem();
        size12MenuItem = new javax.swing.JMenuItem();
        size13MenuItem = new javax.swing.JMenuItem();
        size14MenuItem = new javax.swing.JMenuItem();
        size15MenuItem = new javax.swing.JMenuItem();
        size16MenuItem = new javax.swing.JMenuItem();
        size17MenuItem = new javax.swing.JMenuItem();
        size18MenuItem = new javax.swing.JMenuItem();
        size19MenuItem = new javax.swing.JMenuItem();
        size20MenuItem = new javax.swing.JMenuItem();
        size21MenuItem = new javax.swing.JMenuItem();
        size22MenuItem = new javax.swing.JMenuItem();
        size23MenuItem = new javax.swing.JMenuItem();
        size24MenuItem = new javax.swing.JMenuItem();
        size25MenuItem = new javax.swing.JMenuItem();
        size26MenuItem = new javax.swing.JMenuItem();
        size27MenuItem = new javax.swing.JMenuItem();
        size28MenuItem = new javax.swing.JMenuItem();
        size29MenuItem = new javax.swing.JMenuItem();
        size30MenuItem = new javax.swing.JMenuItem();
        size32MenuItem = new javax.swing.JMenuItem();
        size34MenuItem = new javax.swing.JMenuItem();
        size36MenuItem = new javax.swing.JMenuItem();
        size38MenuItem = new javax.swing.JMenuItem();
        size40MenuItem = new javax.swing.JMenuItem();
        size42MenuItem = new javax.swing.JMenuItem();
        size44MenuItem = new javax.swing.JMenuItem();
        size46MenuItem = new javax.swing.JMenuItem();
        estiloTextoMenu = new javax.swing.JMenu();
        negritaMenuItem = new javax.swing.JMenuItem();
        cursivaMenuItem = new javax.swing.JMenuItem();
        subrayadoMenuItem = new javax.swing.JMenuItem();
        alineadoMenu = new javax.swing.JMenu();
        izqMenuItem = new javax.swing.JMenuItem();
        centroMenuItem = new javax.swing.JMenuItem();
        derMenuItem = new javax.swing.JMenuItem();
        justifiedMenuItem = new javax.swing.JMenuItem();
        AceptarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        seleccionarButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        colorButton = new javax.swing.JButton();
        leftAButton = new javax.swing.JButton();
        centerAButton = new javax.swing.JButton();
        rightAButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        tamanhoTextoComboBox = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        negritaButton = new javax.swing.JButton();
        cursivaButton = new javax.swing.JButton();
        subrayadoButton = new javax.swing.JButton();
        nuevaLineaButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        editorTextPane = new javax.swing.JTextPane();
        justifiedAButton = new javax.swing.JButton();
        fuentesComboBox = new javax.swing.JComboBox<>();
        procesoProgressBar = new javax.swing.JProgressBar();
        DescargarButton = new javax.swing.JButton();

        colorMenuItem.setText("Color");
        colorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuItemActionPerformed(evt);
            }
        });
        editorPopupMenu.add(colorMenuItem);

        sizeMenu.setText("Tama√±o Texto");

        size10MenuItem.setText("10");
        size10MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size10MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size10MenuItem);

        size11MenuItem.setText("11");
        size11MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size11MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size11MenuItem);

        size12MenuItem.setText("12");
        size12MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size12MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size12MenuItem);

        size13MenuItem.setText("13");
        size13MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size13MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size13MenuItem);

        size14MenuItem.setText("14");
        size14MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size14MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size14MenuItem);

        size15MenuItem.setText("15");
        size15MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size15MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size15MenuItem);

        size16MenuItem.setText("16");
        size16MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size16MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size16MenuItem);

        size17MenuItem.setText("17");
        size17MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size17MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size17MenuItem);

        size18MenuItem.setText("18");
        size18MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size18MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size18MenuItem);

        size19MenuItem.setText("19");
        size19MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size19MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size19MenuItem);

        size20MenuItem.setText("20");
        size20MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size20MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size20MenuItem);

        size21MenuItem.setText("21");
        size21MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size21MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size21MenuItem);

        size22MenuItem.setText("22");
        size22MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size22MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size22MenuItem);

        size23MenuItem.setText("23");
        size23MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size23MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size23MenuItem);

        size24MenuItem.setText("24");
        size24MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size24MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size24MenuItem);

        size25MenuItem.setText("25");
        size25MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size25MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size25MenuItem);

        size26MenuItem.setText("26");
        size26MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size26MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size26MenuItem);

        size27MenuItem.setText("27");
        size27MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size27MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size27MenuItem);

        size28MenuItem.setText("28");
        size28MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size28MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size28MenuItem);

        size29MenuItem.setText("29");
        size29MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size29MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size29MenuItem);

        size30MenuItem.setText("30");
        size30MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size30MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size30MenuItem);

        size32MenuItem.setText("32");
        size32MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size32MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size32MenuItem);

        size34MenuItem.setText("34");
        size34MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size34MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size34MenuItem);

        size36MenuItem.setText("36");
        size36MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size36MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size36MenuItem);

        size38MenuItem.setText("38");
        size38MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size38MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size38MenuItem);

        size40MenuItem.setText("40");
        size40MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size40MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size40MenuItem);

        size42MenuItem.setText("42");
        size42MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size42MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size42MenuItem);

        size44MenuItem.setText("44");
        size44MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size44MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size44MenuItem);

        size46MenuItem.setText("46");
        size46MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size46MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size46MenuItem);

        editorPopupMenu.add(sizeMenu);

        estiloTextoMenu.setText("Estilo Texto");

        negritaMenuItem.setText("Negrita");
        negritaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negritaMenuItemActionPerformed(evt);
            }
        });
        estiloTextoMenu.add(negritaMenuItem);

        cursivaMenuItem.setText("Cursiva");
        cursivaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursivaMenuItemActionPerformed(evt);
            }
        });
        estiloTextoMenu.add(cursivaMenuItem);

        subrayadoMenuItem.setText("Subrayado");
        subrayadoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subrayadoMenuItemActionPerformed(evt);
            }
        });
        estiloTextoMenu.add(subrayadoMenuItem);

        editorPopupMenu.add(estiloTextoMenu);

        alineadoMenu.setText("Alineado");

        izqMenuItem.setText("Izquierda");
        izqMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izqMenuItemActionPerformed(evt);
            }
        });
        alineadoMenu.add(izqMenuItem);

        centroMenuItem.setText("Centro");
        centroMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centroMenuItemActionPerformed(evt);
            }
        });
        alineadoMenu.add(centroMenuItem);

        derMenuItem.setText("Derecha");
        derMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                derMenuItemActionPerformed(evt);
            }
        });
        alineadoMenu.add(derMenuItem);

        justifiedMenuItem.setText("Justificado");
        justifiedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                justifiedMenuItemActionPerformed(evt);
            }
        });
        alineadoMenu.add(justifiedMenuItem);

        editorPopupMenu.add(alineadoMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor de Texto");

        AceptarButton.setText("Ok");
        AceptarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        seleccionarButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        seleccionarButton.setText("Seleccionar...");
        seleccionarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Texto:");

        colorButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        colorButton.setForeground(new java.awt.Color(204, 204, 0));
        colorButton.setText("Color");
        colorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorButtonActionPerformed(evt);
            }
        });

        leftAButton.setText("Left");
        leftAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftAButtonActionPerformed(evt);
            }
        });

        centerAButton.setText("Center");
        centerAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerAButtonActionPerformed(evt);
            }
        });

        rightAButton.setText("Right");
        rightAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightAButtonActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        tamanhoTextoComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tamanhoTextoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "32", "34", "36", "38", "40", "42", "44", "46" }));
        tamanhoTextoComboBox.setSelectedIndex(2);
        tamanhoTextoComboBox.setToolTipText("");
        tamanhoTextoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tamanhoTextoComboBoxItemStateChanged(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        negritaButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        negritaButton.setText("N");
        negritaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negritaButtonActionPerformed(evt);
            }
        });

        cursivaButton.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        cursivaButton.setText("K");
        cursivaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursivaButtonActionPerformed(evt);
            }
        });

        subrayadoButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        subrayadoButton.setText("S");
        subrayadoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subrayadoButtonActionPerformed(evt);
            }
        });

        nuevaLineaButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nuevaLineaButton.setText("T");
        nuevaLineaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaLineaButtonActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        editorTextPane.setContentType("text/rtf"); // NOI18N
        editorTextPane.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editorTextPane.setComponentPopupMenu(editorPopupMenu);
        editorTextPane.setMargin(new java.awt.Insets(15, 10, 15, 10));
        jScrollPane2.setViewportView(editorTextPane);

        justifiedAButton.setText("Justificado");
        justifiedAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                justifiedAButtonActionPerformed(evt);
            }
        });

        fuentesComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fuentesComboBox.setToolTipText("");
        fuentesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fuentesComboBoxItemStateChanged(evt);
            }
        });

        procesoProgressBar.setIndeterminate(true);

        DescargarButton.setText("Descargar");
        DescargarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DescargarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nuevaLineaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tamanhoTextoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(fuentesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(colorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                        .addComponent(negritaButton)
                        .addGap(4, 4, 4)
                        .addComponent(cursivaButton)
                        .addGap(4, 4, 4)
                        .addComponent(subrayadoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                        .addComponent(leftAButton)
                        .addGap(4, 4, 4)
                        .addComponent(centerAButton)
                        .addGap(4, 4, 4)
                        .addComponent(rightAButton)
                        .addGap(4, 4, 4)
                        .addComponent(justifiedAButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 20, Short.MAX_VALUE)
                        .addComponent(seleccionarButton))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AceptarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelarButton)
                        .addGap(185, 185, 185)
                        .addComponent(DescargarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(procesoProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tamanhoTextoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nuevaLineaButton)
                        .addComponent(fuentesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(negritaButton)
                        .addComponent(cursivaButton)
                        .addComponent(subrayadoButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftAButton)
                            .addComponent(centerAButton)
                            .addComponent(rightAButton)
                            .addComponent(justifiedAButton))
                        .addComponent(jSeparator1))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionarButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AceptarButton)
                        .addComponent(cancelarButton)
                        .addComponent(DescargarButton))
                    .addComponent(procesoProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {centerAButton, colorButton, cursivaButton, fuentesComboBox, justifiedAButton, leftAButton, negritaButton, nuevaLineaButton, rightAButton, seleccionarButton, subrayadoButton, tamanhoTextoComboBox});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seleccionarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarButtonActionPerformed
        cargarArchivoWord();
    }//GEN-LAST:event_seleccionarButtonActionPerformed

    private void AceptarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarButtonActionPerformed
        editorTextPane.getText();
    }//GEN-LAST:event_AceptarButtonActionPerformed

    private void colorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorButtonActionPerformed
        cargarColorChooser();
    }//GEN-LAST:event_colorButtonActionPerformed

    private void colorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuItemActionPerformed
        cargarColorChooser();
    }//GEN-LAST:event_colorMenuItemActionPerformed

    private void leftAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftAButtonActionPerformed
        alignText(StyleConstants.ALIGN_LEFT);
    }//GEN-LAST:event_leftAButtonActionPerformed

    private void centerAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerAButtonActionPerformed
        alignText(StyleConstants.ALIGN_CENTER);
    }//GEN-LAST:event_centerAButtonActionPerformed

    private void rightAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightAButtonActionPerformed
        alignText(StyleConstants.ALIGN_RIGHT);
    }//GEN-LAST:event_rightAButtonActionPerformed

    private void size10MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size10MenuItemActionPerformed
        resizeText(10.0);
    }//GEN-LAST:event_size10MenuItemActionPerformed

    private void tamanhoTextoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tamanhoTextoComboBoxItemStateChanged
        if(evt.getItem() != null) {
            try {
                tamanhoActual = Integer.valueOf(String.valueOf(evt.getItem()));
                resizeText(Double.valueOf(String.valueOf(evt.getItem())));
            } catch(Exception ex) {
                
            }
        }
    }//GEN-LAST:event_tamanhoTextoComboBoxItemStateChanged

    private void negritaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negritaMenuItemActionPerformed
        setTextStyle("negrita");
    }//GEN-LAST:event_negritaMenuItemActionPerformed

    private void cursivaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursivaMenuItemActionPerformed
        setTextStyle("cursiva");
    }//GEN-LAST:event_cursivaMenuItemActionPerformed

    private void subrayadoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subrayadoMenuItemActionPerformed
        setTextStyle("subrayado");
    }//GEN-LAST:event_subrayadoMenuItemActionPerformed

    private void negritaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negritaButtonActionPerformed
        setTextStyle("negrita");
    }//GEN-LAST:event_negritaButtonActionPerformed

    private void cursivaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursivaButtonActionPerformed
        setTextStyle("cursiva");
    }//GEN-LAST:event_cursivaButtonActionPerformed

    private void subrayadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subrayadoButtonActionPerformed
        setTextStyle("subrayado");
    }//GEN-LAST:event_subrayadoButtonActionPerformed

    private void nuevaLineaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaLineaButtonActionPerformed
        agregarElementoParrafo();
    }//GEN-LAST:event_nuevaLineaButtonActionPerformed

    private void size13MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size13MenuItemActionPerformed
        resizeText(13.0);
    }//GEN-LAST:event_size13MenuItemActionPerformed

    private void size11MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size11MenuItemActionPerformed
        resizeText(11.0);
    }//GEN-LAST:event_size11MenuItemActionPerformed

    private void size12MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size12MenuItemActionPerformed
        resizeText(12.0);
    }//GEN-LAST:event_size12MenuItemActionPerformed

    private void size14MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size14MenuItemActionPerformed
        resizeText(14.0);
    }//GEN-LAST:event_size14MenuItemActionPerformed

    private void size15MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size15MenuItemActionPerformed
        resizeText(15.0);
    }//GEN-LAST:event_size15MenuItemActionPerformed

    private void size16MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size16MenuItemActionPerformed
        resizeText(16.0);
    }//GEN-LAST:event_size16MenuItemActionPerformed

    private void size17MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size17MenuItemActionPerformed
        resizeText(17.0);
    }//GEN-LAST:event_size17MenuItemActionPerformed

    private void size18MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size18MenuItemActionPerformed
        resizeText(18.0);
    }//GEN-LAST:event_size18MenuItemActionPerformed

    private void size19MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size19MenuItemActionPerformed
        resizeText(19.0);
    }//GEN-LAST:event_size19MenuItemActionPerformed

    private void size20MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size20MenuItemActionPerformed
        resizeText(20.0);
    }//GEN-LAST:event_size20MenuItemActionPerformed

    private void justifiedAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_justifiedAButtonActionPerformed
        alignText(StyleConstants.ALIGN_JUSTIFIED);
    }//GEN-LAST:event_justifiedAButtonActionPerformed

    private void size21MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size21MenuItemActionPerformed
        resizeText(21.0);
    }//GEN-LAST:event_size21MenuItemActionPerformed

    private void size22MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size22MenuItemActionPerformed
        resizeText(22.0);
    }//GEN-LAST:event_size22MenuItemActionPerformed

    private void size23MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size23MenuItemActionPerformed
        resizeText(23.0);
    }//GEN-LAST:event_size23MenuItemActionPerformed

    private void size24MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size24MenuItemActionPerformed
        resizeText(24.0);
    }//GEN-LAST:event_size24MenuItemActionPerformed

    private void size25MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size25MenuItemActionPerformed
        resizeText(25.0);
    }//GEN-LAST:event_size25MenuItemActionPerformed

    private void size26MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size26MenuItemActionPerformed
        resizeText(26.0);
    }//GEN-LAST:event_size26MenuItemActionPerformed

    private void size27MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size27MenuItemActionPerformed
        resizeText(27.0);
    }//GEN-LAST:event_size27MenuItemActionPerformed

    private void size28MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size28MenuItemActionPerformed
        resizeText(28.0);
    }//GEN-LAST:event_size28MenuItemActionPerformed

    private void size29MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size29MenuItemActionPerformed
        resizeText(29.0);
    }//GEN-LAST:event_size29MenuItemActionPerformed

    private void size30MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size30MenuItemActionPerformed
        resizeText(30.0);
    }//GEN-LAST:event_size30MenuItemActionPerformed

    private void size32MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size32MenuItemActionPerformed
        resizeText(32.0);
    }//GEN-LAST:event_size32MenuItemActionPerformed

    private void size34MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size34MenuItemActionPerformed
        resizeText(34.0);
    }//GEN-LAST:event_size34MenuItemActionPerformed

    private void size36MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size36MenuItemActionPerformed
        resizeText(36.0);
    }//GEN-LAST:event_size36MenuItemActionPerformed

    private void size38MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size38MenuItemActionPerformed
        resizeText(38.0);
    }//GEN-LAST:event_size38MenuItemActionPerformed

    private void size40MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size40MenuItemActionPerformed
        resizeText(40.0);
    }//GEN-LAST:event_size40MenuItemActionPerformed

    private void size42MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size42MenuItemActionPerformed
        resizeText(42.0);
    }//GEN-LAST:event_size42MenuItemActionPerformed

    private void size44MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size44MenuItemActionPerformed
        resizeText(44.0);
    }//GEN-LAST:event_size44MenuItemActionPerformed

    private void size46MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size46MenuItemActionPerformed
        resizeText(46.0);
    }//GEN-LAST:event_size46MenuItemActionPerformed

    private void fuentesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fuentesComboBoxItemStateChanged
        if(evt.getItem() != null) {
            try {
                fuentaActual = String.valueOf(evt.getItem());    
                
                SimpleAttributeSet attrs = new SimpleAttributeSet();
                StyleConstants.setFontFamily(attrs, fuentaActual);
               
                editorTextPane.setCharacterAttributes(attrs, false);
                SwingUtilities.invokeLater(() -> {editorTextPane.grabFocus();});
            } catch(Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_fuentesComboBoxItemStateChanged

    private void DescargarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DescargarButtonActionPerformed
        SwingUtilities.invokeLater(() -> {
            nuevaLineaButton.setEnabled(false);
            fuentesComboBox.setEnabled(false);
            tamanhoTextoComboBox.setEnabled(false);
            negritaButton.setEnabled(false);
            cursivaButton.setEnabled(false);
            subrayadoButton.setEnabled(false);
            leftAButton.setEnabled(false);
            centerAButton.setEnabled(false);
            rightAButton.setEnabled(false);
            justifiedAButton.setEnabled(false);
            seleccionarButton.setEnabled(false);
            editorPopupMenu.setEnabled(false);
            
            procesoProgressBar.setVisible(true);
        });
        
        // Runs outside of the Swing UI thread
        new Thread(() -> {
            try {
                
                if (editorTextPane.getStyledDocument().getLength() > 0) {
                    
                    String direccion = elegirFileChooserParaDescargar();
                    if(direccion != null) {
                        StyledDocument doc = (StyledDocument)editorTextPane.getDocument();

                        //HTMLEditorKit kit = new HTMLEditorKit();
                        RTFEditorKit kit = new RTFEditorKit();
                                

                        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(direccion));
                        kit.write(out, doc, doc.getStartPosition().getOffset(), doc.getLength()); 

                        out.close();
                    }
                    
                }
                        
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                
                nuevaLineaButton.setEnabled(true);
                fuentesComboBox.setEnabled(true);
                tamanhoTextoComboBox.setEnabled(true);
                negritaButton.setEnabled(true);
                cursivaButton.setEnabled(true);
                subrayadoButton.setEnabled(true);
                leftAButton.setEnabled(true);
                centerAButton.setEnabled(true);
                rightAButton.setEnabled(true);
                justifiedAButton.setEnabled(true);
                seleccionarButton.setEnabled(true);
                editorPopupMenu.setEnabled(true);
                
                procesoProgressBar.setVisible(false);
            }
        }).start();

    }//GEN-LAST:event_DescargarButtonActionPerformed

    private void justifiedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_justifiedMenuItemActionPerformed
        alignText(StyleConstants.ALIGN_JUSTIFIED);
    }//GEN-LAST:event_justifiedMenuItemActionPerformed

    private void derMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_derMenuItemActionPerformed
        alignText(StyleConstants.ALIGN_RIGHT);
    }//GEN-LAST:event_derMenuItemActionPerformed

    private void centroMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centroMenuItemActionPerformed
        alignText(StyleConstants.ALIGN_CENTER);
    }//GEN-LAST:event_centroMenuItemActionPerformed

    private void izqMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izqMenuItemActionPerformed
        alignText(StyleConstants.ALIGN_LEFT);
    }//GEN-LAST:event_izqMenuItemActionPerformed

    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelarButtonActionPerformed

    private void cargarFuentes() {
        String[] fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment()
            .getAvailableFontFamilyNames();
        if(fontNames != null) {
            for(int i = 0; i < fontNames.length; i++) {
                fuentesComboBox.addItem(fontNames[i]);
            }
        }
    }
    
    private void cargarColorChooser() {
        //JColorChooser selec = new JColorChooser();
        //selec.setCursor(new Cursor(Cursor.HAND_CURSOR));

        if(colorActual != null) {
            colorActual = JColorChooser.showDialog(null, "Selecciona un color", colorActual);
        } else {
            colorActual = JColorChooser.showDialog(null, "Selecciona un color", Color.BLACK);          
        }
        colorButton.setForeground(colorActual);
        setTextColor(colorActual);
    }
    
    private void agregarElementoParrafo() {
        try {

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            if(colorActual != null) {    
                StyleConstants.setForeground(attrs, colorActual);                        
            }
            if(negritaActivado) {
                StyleConstants.setBold(attrs, true);      
            }
            if(cursivaActivado) {
                StyleConstants.setItalic(attrs, true);      
            }
            if(subrayadoActivado) {
                StyleConstants.setUnderline(attrs, true);      
            }
            if(tamanhoActual > 0) {
                StyleConstants.setFontSize(attrs, tamanhoActual);
            }
            if(fuentesComboBox.getSelectedItem() != null) {
                fuentaActual = String.valueOf(fuentesComboBox.getSelectedItem());
                StyleConstants.setFontFamily(attrs, fuentaActual);
            }
           
            StyleConstants.setAlignment(attrs, alineadoActual);  
            
            editorTextPane.setCharacterAttributes(attrs, true);
            
            if(editorTextPane.getStyledDocument().getLength() > 0) {
                //agrega el salto de linea con los atributos correspondientes
                editorTextPane.getStyledDocument().insertString(
                    editorTextPane.getStyledDocument().getLength(),
                    System.getProperty("line.separator"), attrs);
            }
            editorTextPane.setCaretPosition(editorTextPane.getStyledDocument().getLength());
            SwingUtilities.invokeLater(() -> {editorTextPane.grabFocus();});
            
        
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void setTextColor(Color color) {
        try {
           
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setForeground(attrs, color);
               
            editorTextPane.setCharacterAttributes(attrs, false);
            SwingUtilities.invokeLater(() -> {editorTextPane.grabFocus();});
       
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void alignText(int align) {
        try {
            alineadoActual = align;
            
            leftAButton.setBackground(defaultBackground);
            centerAButton.setBackground(defaultBackground);
            rightAButton.setBackground(defaultBackground);
            justifiedAButton.setBackground(defaultBackground);
            
            if(align == StyleConstants.ALIGN_LEFT) {
                leftAButton.setBackground(new Color(145, 212, 245)); 
            }
            if(align == StyleConstants.ALIGN_CENTER) {
                centerAButton.setBackground(new Color(145, 212, 245)); 
            }
            if(align == StyleConstants.ALIGN_RIGHT) {
                rightAButton.setBackground(new Color(145, 212, 245)); 
            }
            if(align == StyleConstants.ALIGN_JUSTIFIED) {
                justifiedAButton.setBackground(new Color(145, 212, 245)); 
            }
    
            //document.setLogicalStyle(ERROR, style);
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setAlignment(attrs, align);
               
            editorTextPane.setParagraphAttributes(attrs, false);
            SwingUtilities.invokeLater(() -> {editorTextPane.grabFocus();});
            
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void setTextStyle(String estilo) {
        try {
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            if(estilo.equals("negrita")) {
                negritaActivado = !negritaActivado;    
                if(negritaActivado) {
                    negritaButton.setBackground(new Color(145, 212, 245));
                } else {
                    negritaButton.setBackground(defaultBackground);
                }
                StyleConstants.setBold(attrs, negritaActivado);
            }
            
            if(estilo.equals("cursiva")) {
                cursivaActivado = !cursivaActivado; 
                if(cursivaActivado) {
                    cursivaButton.setBackground(new Color(145, 212, 245));
                } else {
                    cursivaButton.setBackground(defaultBackground);
                }
                StyleConstants.setItalic(attrs, cursivaActivado);
            }
            if(estilo.equals("subrayado")) {
                subrayadoActivado = !subrayadoActivado; 
                if(subrayadoActivado) {
                    subrayadoButton.setBackground(new Color(145, 212, 245));
                } else {
                    subrayadoButton.setBackground(defaultBackground);
                }
                StyleConstants.setUnderline(attrs, subrayadoActivado);
            }
           
            editorTextPane.setCharacterAttributes(attrs, false);
            SwingUtilities.invokeLater(() -> {editorTextPane.grabFocus();});
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void resizeText(double tamano) {
        try {
            
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            if(tamano > 0) {
                StyleConstants.setFontSize(attrs, Double.valueOf(tamano).intValue());
            }

            editorTextPane.setCharacterAttributes(attrs, false);     
            SwingUtilities.invokeLater(() -> {editorTextPane.grabFocus();});
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void cargarArchivoWord() {
        JFileChooser archivoSelec = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de word", "doc", "docx");
        archivoSelec.setFileFilter(filtro);
        archivoSelec.setLocation(10, 10);
        archivoSelec.setCurrentDirectory(currentDirectory);
        archivoSelec.setName("Seleccionar archivo de word");
        archivoSelec.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivoSelec.setCursor(new Cursor(Cursor.HAND_CURSOR));

        int estado = archivoSelec.showOpenDialog(this);

        if (estado == JFileChooser.APPROVE_OPTION) {

            try {

                leerArchivo(archivoSelec.getSelectedFile());

            } catch (NullPointerException ex2) {
                JOptionPane.showMessageDialog(this, "El archivo seleccionado no es el correcto", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                //setImagenDefecto();
            } catch (Exception ex3) {
                JOptionPane.showMessageDialog(this, "imagen: " + ex3, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                //setImagenDefecto();
            }
        }
    }
    
    private String elegirFileChooserParaDescargar() {
        JFileChooser archivoSelec = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos RTF", "rtf");
        archivoSelec.setFileFilter(filtro);
        archivoSelec.setLocation(10, 10);
        archivoSelec.setCurrentDirectory(currentDirectory);
        archivoSelec.setName("Seleccionar el directorio en donde descargar");
        archivoSelec.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivoSelec.setCursor(new Cursor(Cursor.HAND_CURSOR));

        int estado = archivoSelec.showOpenDialog(this);

        if (estado == JFileChooser.APPROVE_OPTION) {

            try {

                currentDirectory = archivoSelec.getSelectedFile().getParentFile();
                return archivoSelec.getSelectedFile().getAbsolutePath();

            } catch (NullPointerException ex2) {
                JOptionPane.showMessageDialog(this, "El directorio seleccionado no es el correcto", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                //setImagenDefecto();
            } catch (Exception ex3) {
                JOptionPane.showMessageDialog(this, "imagen: " + ex3, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                //setImagenDefecto();
            }
        }
        return null;
    }
    
    
    
    public void leerArchivo(File archivoSelec) {

        SwingUtilities.invokeLater(() -> {
            nuevaLineaButton.setEnabled(false);
            fuentesComboBox.setEnabled(false);
            tamanhoTextoComboBox.setEnabled(false);
            negritaButton.setEnabled(false);
            cursivaButton.setEnabled(false);
            subrayadoButton.setEnabled(false);
            leftAButton.setEnabled(false);
            centerAButton.setEnabled(false);
            rightAButton.setEnabled(false);
            justifiedAButton.setEnabled(false);
            seleccionarButton.setEnabled(false);
            editorPopupMenu.setEnabled(false);
            
            procesoProgressBar.setVisible(true);
        });
        
        // Runs outside of the Swing UI thread
        new Thread(() -> {
            try ( InputStream inp = new FileInputStream(archivoSelec)) {
                
                if (inp != null) {
                    
                    currentDirectory = archivoSelec.getParentFile();
                    editorTextPane.setText("");
                    XWPFDocument doc = new XWPFDocument(inp);
                    XWPFWordExtractor extrac = new XWPFWordExtractor(doc);
                    if (extrac != null) {
                        //extrac.getDocument().getMirrorMargins();
                        for (XWPFParagraph parrafo : extrac.getDocument().getParagraphs()) {
                            
                            
                            for (XWPFRun run : parrafo.getRuns()) {
                                
                                try {
                                    
                                    SimpleAttributeSet attrs2 = new SimpleAttributeSet();
                                    
                                    if (run.getColor() != null) {
                                        int red = Integer.valueOf(run.getColor().substring(0, 2), 16);
                                        int green = Integer.valueOf(run.getColor().substring(2, 4), 16);
                                        int blue = Integer.valueOf(run.getColor().substring(4, 6), 16);
                                        
                                        Color color = new Color(red, green, blue);
                                        colorActual = color;
                                        colorButton.setForeground(colorActual);
                                        
                                        StyleConstants.setForeground(attrs2, colorActual);
                                    }
                                    
                                    tamanhoActual = (run.getFontSizeAsDouble() != null ? run.getFontSizeAsDouble().intValue() : 12);
                                    
                                    fuentaActual = run.getFontFamily();
                                    if (fuentaActual != null) {
                                        StyleConstants.setFontFamily(attrs2, fuentaActual);
                                        fuentesComboBox.setSelectedItem(fuentaActual);
                                    }
                                    
                                    negritaActivado = run.isBold();
                                    cursivaActivado = run.isItalic();
                                    int underlineValue = (run.getUnderline() != null ? run.getUnderline().getValue() : 0);
                                    subrayadoActivado = underlineValue != UnderlinePatterns.NONE.getValue();
                                    
                                    StyleConstants.setFontSize(attrs2, tamanhoActual);
                                    tamanhoTextoComboBox.setSelectedItem(tamanhoActual);
                                    
                                    StyleConstants.setBold(attrs2, negritaActivado);
                                    StyleConstants.setItalic(attrs2, cursivaActivado);
                                    StyleConstants.setUnderline(attrs2, subrayadoActivado);
                                    
                                    String text = run.toString();
                                    StyledDocument sd = editorTextPane.getStyledDocument();
                                    sd.insertString(sd.getLength(), text, attrs2);
                                    editorTextPane.setCharacterAttributes(attrs2, false);
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                
                            }
                            
                            SimpleAttributeSet attrs = new SimpleAttributeSet();
                            
                            if(parrafo.getAlignment() != null) {
                                System.out.println("Alineado: " + parrafo.getAlignment().getValue());
                                if (parrafo.getAlignment().getValue() == ParagraphAlignment.CENTER.getValue()) {
                                    StyleConstants.setAlignment(attrs, StyleConstants.ALIGN_CENTER);
                                } else if (parrafo.getAlignment().getValue() == ParagraphAlignment.LEFT.getValue()) {
                                    StyleConstants.setAlignment(attrs, StyleConstants.ALIGN_LEFT);
                                } else if (parrafo.getAlignment().getValue() == ParagraphAlignment.RIGHT.getValue()) {
                                    StyleConstants.setAlignment(attrs, StyleConstants.ALIGN_RIGHT);
                                } else if (parrafo.getAlignment().getValue() == ParagraphAlignment.BOTH.getValue()) {
                                    StyleConstants.setAlignment(attrs, StyleConstants.ALIGN_JUSTIFIED);
                                } else {
                                    StyleConstants.setAlignment(attrs, StyleConstants.ALIGN_LEFT);
                                }
                            } else {
                                StyleConstants.setAlignment(attrs, StyleConstants.ALIGN_LEFT);
                            }
                            
                            editorTextPane.setCaretPosition(editorTextPane.getStyledDocument().getLength());
                            editorTextPane.setParagraphAttributes(attrs, false);
                            
                            if(editorTextPane.getStyledDocument().getLength() > 0){
                                //agrega el salto de linea con los atributos correspondientes
                                editorTextPane.getStyledDocument().insertString(
                                        editorTextPane.getStyledDocument().getLength(),
                                        System.getProperty("line.separator"), null);
                                
                            }
                            
                            
                            
                            
                            
                        }
                    }
                    
                    //inp.close();
                }
                        
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                nuevaLineaButton.setEnabled(true);
                fuentesComboBox.setEnabled(true);
                tamanhoTextoComboBox.setEnabled(true);
                negritaButton.setEnabled(true);
                cursivaButton.setEnabled(true);
                subrayadoButton.setEnabled(true);
                leftAButton.setEnabled(true);
                centerAButton.setEnabled(true);
                rightAButton.setEnabled(true);
                justifiedAButton.setEnabled(true);
                seleccionarButton.setEnabled(true);
                editorPopupMenu.setEnabled(true);
                
                procesoProgressBar.setVisible(false);
            }
        }).start();

    }
    
    
    private void cargarImagen() {
        JFileChooser elegirImg = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Im√°genes", "gif", "jpeg", "jpg", "bmp", "png");
        elegirImg.setFileFilter(filtro);
        elegirImg.setLocation(10, 10);
        elegirImg.setName("Seleccione una imagen");
        elegirImg.setCurrentDirectory(currentDirectory);
        elegirImg.setFileSelectionMode(JFileChooser.FILES_ONLY);
        elegirImg.setCursor(new Cursor(Cursor.HAND_CURSOR));

        int estado = elegirImg.showOpenDialog(this);

        if (estado == JFileChooser.APPROVE_OPTION) {

            try {
                //asignar imagen a variable de tipo InputStream para insertar en la BD
                File laImagen = elegirImg.getSelectedFile();
                currentDirectory = elegirImg.getSelectedFile().getParentFile();
                long longitudBytes = (Long) laImagen.length();
                // forma forzada de asignar un valor muy grande a un long (poniendo L al final del numero)4294967295L
                long a = 1048576L;
                if (longitudBytes <= a) {

          

           
            
                    //Image icono = ImageIO.read(laImagen).getScaledInstance(
                    //        imagenEmpLabel.getWidth(), imagenEmpLabel.getHeight(), Image.SCALE_DEFAULT);

                    //if (icono != null) {
                        editorTextPane.insertIcon(new ImageIcon(laImagen.getAbsolutePath())); 
                        
                        // Ponemos el cursor al final del texto
                        editorTextPane.setCaretPosition(editorTextPane.getStyledDocument().getLength());
                    //}

                } else {
                    JOptionPane.showMessageDialog(this, "El archivo seleccionado supera el tama√±o maximo permitido", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                }
            /*} catch (IOException ex1) {
                JOptionPane.showMessageDialog(this, "imagen: " + ex1, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            */} catch (NullPointerException ex2) {
                JOptionPane.showMessageDialog(this, "El archivo seleccionado no es el correcto", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex3) {
                JOptionPane.showMessageDialog(this, "imagen: " + ex3, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TextEditorFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AceptarButton;
    private javax.swing.JButton DescargarButton;
    private javax.swing.JMenu alineadoMenu;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JButton centerAButton;
    private javax.swing.JMenuItem centroMenuItem;
    private javax.swing.JButton colorButton;
    private javax.swing.JMenuItem colorMenuItem;
    private javax.swing.JButton cursivaButton;
    private javax.swing.JMenuItem cursivaMenuItem;
    private javax.swing.JMenuItem derMenuItem;
    private javax.swing.JPopupMenu editorPopupMenu;
    private javax.swing.JTextPane editorTextPane;
    private javax.swing.JMenu estiloTextoMenu;
    private javax.swing.JComboBox<String> fuentesComboBox;
    private javax.swing.JMenuItem izqMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton justifiedAButton;
    private javax.swing.JMenuItem justifiedMenuItem;
    private javax.swing.JButton leftAButton;
    private javax.swing.JButton negritaButton;
    private javax.swing.JMenuItem negritaMenuItem;
    private javax.swing.JButton nuevaLineaButton;
    private javax.swing.JProgressBar procesoProgressBar;
    private javax.swing.JButton rightAButton;
    private javax.swing.JButton seleccionarButton;
    private javax.swing.JMenuItem size10MenuItem;
    private javax.swing.JMenuItem size11MenuItem;
    private javax.swing.JMenuItem size12MenuItem;
    private javax.swing.JMenuItem size13MenuItem;
    private javax.swing.JMenuItem size14MenuItem;
    private javax.swing.JMenuItem size15MenuItem;
    private javax.swing.JMenuItem size16MenuItem;
    private javax.swing.JMenuItem size17MenuItem;
    private javax.swing.JMenuItem size18MenuItem;
    private javax.swing.JMenuItem size19MenuItem;
    private javax.swing.JMenuItem size20MenuItem;
    private javax.swing.JMenuItem size21MenuItem;
    private javax.swing.JMenuItem size22MenuItem;
    private javax.swing.JMenuItem size23MenuItem;
    private javax.swing.JMenuItem size24MenuItem;
    private javax.swing.JMenuItem size25MenuItem;
    private javax.swing.JMenuItem size26MenuItem;
    private javax.swing.JMenuItem size27MenuItem;
    private javax.swing.JMenuItem size28MenuItem;
    private javax.swing.JMenuItem size29MenuItem;
    private javax.swing.JMenuItem size30MenuItem;
    private javax.swing.JMenuItem size32MenuItem;
    private javax.swing.JMenuItem size34MenuItem;
    private javax.swing.JMenuItem size36MenuItem;
    private javax.swing.JMenuItem size38MenuItem;
    private javax.swing.JMenuItem size40MenuItem;
    private javax.swing.JMenuItem size42MenuItem;
    private javax.swing.JMenuItem size44MenuItem;
    private javax.swing.JMenuItem size46MenuItem;
    private javax.swing.JMenu sizeMenu;
    private javax.swing.JButton subrayadoButton;
    private javax.swing.JMenuItem subrayadoMenuItem;
    private javax.swing.JComboBox<String> tamanhoTextoComboBox;
    // End of variables declaration//GEN-END:variables
}
