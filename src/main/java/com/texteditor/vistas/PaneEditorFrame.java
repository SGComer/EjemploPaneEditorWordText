/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.texteditor.vistas;

import com.texteditor.utils.AlignEnum;
import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;
import javax.print.DocFlavor;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author Administrador
 */
public class PaneEditorFrame extends javax.swing.JFrame {

    private JPopupMenu popup;
    /**
     * Creates new form PaneEditarFrame
     */
    public PaneEditorFrame() {
        //javax.swing.ImageIcon a = new javax.swing.ImageIcon(getClass().getResource("\\com\\texteditor\\resources\\text16px.png"));
        initComponents();
       
        //diagnosticoEditorPane.setComponentPopupMenu(editorPopupMenu);
        cargarFuentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorPopupMenu = new javax.swing.JPopupMenu();
        colorMenuItem = new javax.swing.JMenuItem();
        sizeMenu = new javax.swing.JMenu();
        size8MenuItem = new javax.swing.JMenuItem();
        size9MenuItem = new javax.swing.JMenuItem();
        size10MenuItem = new javax.swing.JMenuItem();
        size11MenuItem = new javax.swing.JMenuItem();
        size12MenuItem = new javax.swing.JMenuItem();
        size13MenuItem = new javax.swing.JMenuItem();
        size14MenuItem = new javax.swing.JMenuItem();
        size15MenuItem = new javax.swing.JMenuItem();
        size16MenuItem = new javax.swing.JMenuItem();
        size17MenuItem = new javax.swing.JMenuItem();
        size18MenuItem = new javax.swing.JMenuItem();
        size19MenuItem = new javax.swing.JMenuItem();
        size20MenuItem = new javax.swing.JMenuItem();
        estiloTextoMenu = new javax.swing.JMenu();
        negritaMenuItem = new javax.swing.JMenuItem();
        cursivaMenuItem = new javax.swing.JMenuItem();
        subrayadoMenuItem = new javax.swing.JMenuItem();
        alineadoMenu = new javax.swing.JMenu();
        izqMenuItem = new javax.swing.JMenuItem();
        centroMenuItem = new javax.swing.JMenuItem();
        derMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        diagnosticoEditorPane = new javax.swing.JEditorPane();
        AceptarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        seleccionarButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        colorButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        leftAButton = new javax.swing.JButton();
        centerAButton = new javax.swing.JButton();
        rightAButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        tamanhoTextoComboBox = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        negritaButton = new javax.swing.JButton();
        cursivaButton = new javax.swing.JButton();
        subrayadoButton = new javax.swing.JButton();
        negritaButton1 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        colorMenuItem.setText("Color");
        colorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuItemActionPerformed(evt);
            }
        });
        editorPopupMenu.add(colorMenuItem);

        sizeMenu.setText("Tama√±o Texto");

        size8MenuItem.setText("8");
        size8MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size8MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size8MenuItem);

        size9MenuItem.setText("9");
        size9MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size9MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size9MenuItem);

        size10MenuItem.setText("10");
        size10MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size10MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size10MenuItem);

        size11MenuItem.setText("11");
        size11MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size11MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size11MenuItem);

        size12MenuItem.setText("12");
        size12MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size12MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size12MenuItem);

        size13MenuItem.setText("13");
        size13MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size13MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size13MenuItem);

        size14MenuItem.setText("14");
        size14MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size14MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size14MenuItem);

        size15MenuItem.setText("15");
        size15MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size15MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size15MenuItem);

        size16MenuItem.setText("16");
        size16MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size16MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size16MenuItem);

        size17MenuItem.setText("17");
        size17MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size17MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size17MenuItem);

        size18MenuItem.setText("18");
        size18MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size18MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size18MenuItem);

        size19MenuItem.setText("19");
        size19MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size19MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size19MenuItem);

        size20MenuItem.setText("20");
        size20MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                size20MenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(size20MenuItem);

        editorPopupMenu.add(sizeMenu);

        estiloTextoMenu.setText("Estilo Texto");

        negritaMenuItem.setText("Negrita");
        negritaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negritaMenuItemActionPerformed(evt);
            }
        });
        estiloTextoMenu.add(negritaMenuItem);

        cursivaMenuItem.setText("Cursiva");
        cursivaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursivaMenuItemActionPerformed(evt);
            }
        });
        estiloTextoMenu.add(cursivaMenuItem);

        subrayadoMenuItem.setText("Subrayado");
        subrayadoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subrayadoMenuItemActionPerformed(evt);
            }
        });
        estiloTextoMenu.add(subrayadoMenuItem);

        editorPopupMenu.add(estiloTextoMenu);

        alineadoMenu.setText("Alineado");

        izqMenuItem.setText("Izquierda");
        alineadoMenu.add(izqMenuItem);

        centroMenuItem.setText("Centro");
        alineadoMenu.add(centroMenuItem);

        derMenuItem.setText("Derecha");
        alineadoMenu.add(derMenuItem);

        editorPopupMenu.add(alineadoMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        diagnosticoEditorPane.setContentType("text/html"); // NOI18N
        diagnosticoEditorPane.setText("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n<head><title>Untitled Page</title></head>\n<body>\n<p style=\"text-align:center; font-size:35pt; font-weight:bold;\">HTML Table</p>\n<p style=\"text-align:left; font-size:24pt;\">Ejemplo de editor pane </p>\n<p style=\"text-align:right; font-size:15pt;  text-decoration:underline; font-style:italic;\">Para comenzar con esta redaccion casual, tenemos que enteder las bondades de la hoja de estilo conocida por sus siglasn en ingles, css. No da la posibilidad de decorar o formatear nuestras vistas con una infinidad de opciones en color, animacion, sobreado, etc.\n</body>\n</html>");
        diagnosticoEditorPane.setComponentPopupMenu(editorPopupMenu);
        diagnosticoEditorPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                diagnosticoEditorPaneMouseClicked(evt);
            }
        });
        diagnosticoEditorPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                diagnosticoEditorPaneKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(diagnosticoEditorPane);

        AceptarButton.setText("Ok");
        AceptarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");

        seleccionarButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        seleccionarButton.setText("Seleccionar...");
        seleccionarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Texto:");

        colorButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        colorButton.setForeground(new java.awt.Color(204, 204, 0));
        colorButton.setText("C");
        colorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Color:");

        leftAButton.setText("Left");
        leftAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftAButtonActionPerformed(evt);
            }
        });

        centerAButton.setText("Center");
        centerAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerAButtonActionPerformed(evt);
            }
        });

        rightAButton.setText("Right");
        rightAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightAButtonActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        tamanhoTextoComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tamanhoTextoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
        tamanhoTextoComboBox.setToolTipText("");
        tamanhoTextoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tamanhoTextoComboBoxItemStateChanged(evt);
            }
        });
        tamanhoTextoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamanhoTextoComboBoxActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        negritaButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        negritaButton.setText("N");
        negritaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negritaButtonActionPerformed(evt);
            }
        });

        cursivaButton.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        cursivaButton.setText("K");
        cursivaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursivaButtonActionPerformed(evt);
            }
        });

        subrayadoButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        subrayadoButton.setText("S");
        subrayadoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subrayadoButtonActionPerformed(evt);
            }
        });

        negritaButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        negritaButton1.setText("T");
        negritaButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negritaButton1ActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(AceptarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelarButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(negritaButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tamanhoTextoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(negritaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cursivaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subrayadoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(leftAButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(centerAButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightAButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seleccionarButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tamanhoTextoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(colorButton)
                        .addComponent(negritaButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(negritaButton)
                        .addComponent(cursivaButton)
                        .addComponent(subrayadoButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(seleccionarButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(leftAButton)
                                .addComponent(centerAButton)
                                .addComponent(rightAButton))
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2)))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AceptarButton)
                    .addComponent(cancelarButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seleccionarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarButtonActionPerformed
        cargarArchivoWord();
    }//GEN-LAST:event_seleccionarButtonActionPerformed

    private void diagnosticoEditorPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_diagnosticoEditorPaneKeyPressed

    }//GEN-LAST:event_diagnosticoEditorPaneKeyPressed

    private void AceptarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarButtonActionPerformed
        diagnosticoEditorPane.getText();
    }//GEN-LAST:event_AceptarButtonActionPerformed

    private void diagnosticoEditorPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_diagnosticoEditorPaneMouseClicked

    }//GEN-LAST:event_diagnosticoEditorPaneMouseClicked

    private void colorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorButtonActionPerformed
        cargarColorChooser();
    }//GEN-LAST:event_colorButtonActionPerformed

    private void colorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuItemActionPerformed
        cargarColorChooser();
    }//GEN-LAST:event_colorMenuItemActionPerformed

    private void leftAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftAButtonActionPerformed
        alignText(AlignEnum.LEFT);
    }//GEN-LAST:event_leftAButtonActionPerformed

    private void centerAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerAButtonActionPerformed
        alignText(AlignEnum.CENTER);
    }//GEN-LAST:event_centerAButtonActionPerformed

    private void rightAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightAButtonActionPerformed
        alignText(AlignEnum.RIGHT);
    }//GEN-LAST:event_rightAButtonActionPerformed

    private void size8MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size8MenuItemActionPerformed
        resizeText(8.0);
    }//GEN-LAST:event_size8MenuItemActionPerformed

    private void size9MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size9MenuItemActionPerformed
        resizeText(9.0);
    }//GEN-LAST:event_size9MenuItemActionPerformed

    private void size10MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size10MenuItemActionPerformed
        resizeText(10.0);
    }//GEN-LAST:event_size10MenuItemActionPerformed

    private void tamanhoTextoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tamanhoTextoComboBoxItemStateChanged
        if(evt.getItem() != null) {
            try {
                resizeText(Double.valueOf(String.valueOf(evt.getItem())));
            } catch(Exception ex) {
                
            }
        }
    }//GEN-LAST:event_tamanhoTextoComboBoxItemStateChanged

    private void negritaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negritaMenuItemActionPerformed
        setTextStyle("negrita");
    }//GEN-LAST:event_negritaMenuItemActionPerformed

    private void cursivaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursivaMenuItemActionPerformed
        setTextStyle("cursiva");
    }//GEN-LAST:event_cursivaMenuItemActionPerformed

    private void subrayadoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subrayadoMenuItemActionPerformed
        setTextStyle("subrayado");
    }//GEN-LAST:event_subrayadoMenuItemActionPerformed

    private void negritaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negritaButtonActionPerformed
        setTextStyle("negrita");
    }//GEN-LAST:event_negritaButtonActionPerformed

    private void cursivaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursivaButtonActionPerformed
        setTextStyle("cursiva");
    }//GEN-LAST:event_cursivaButtonActionPerformed

    private void subrayadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subrayadoButtonActionPerformed
        setTextStyle("subrayado");
    }//GEN-LAST:event_subrayadoButtonActionPerformed

    private void negritaButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negritaButton1ActionPerformed
        agregarElementoParrafo();
    }//GEN-LAST:event_negritaButton1ActionPerformed

    private void tamanhoTextoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamanhoTextoComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tamanhoTextoComboBoxActionPerformed

    private void size13MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size13MenuItemActionPerformed
        resizeText(13.0);
    }//GEN-LAST:event_size13MenuItemActionPerformed

    private void size11MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size11MenuItemActionPerformed
        resizeText(11.0);
    }//GEN-LAST:event_size11MenuItemActionPerformed

    private void size12MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size12MenuItemActionPerformed
        resizeText(12.0);
    }//GEN-LAST:event_size12MenuItemActionPerformed

    private void size14MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size14MenuItemActionPerformed
        resizeText(14.0);
    }//GEN-LAST:event_size14MenuItemActionPerformed

    private void size15MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size15MenuItemActionPerformed
        resizeText(15.0);
    }//GEN-LAST:event_size15MenuItemActionPerformed

    private void size16MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size16MenuItemActionPerformed
        resizeText(16.0);
    }//GEN-LAST:event_size16MenuItemActionPerformed

    private void size17MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size17MenuItemActionPerformed
        resizeText(17.0);
    }//GEN-LAST:event_size17MenuItemActionPerformed

    private void size18MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size18MenuItemActionPerformed
        resizeText(18.0);
    }//GEN-LAST:event_size18MenuItemActionPerformed

    private void size19MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size19MenuItemActionPerformed
        resizeText(19.0);
    }//GEN-LAST:event_size19MenuItemActionPerformed

    private void size20MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_size20MenuItemActionPerformed
        resizeText(20.0);
    }//GEN-LAST:event_size20MenuItemActionPerformed

    private void cargarFuentes() {
//        String[] fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment()
//            .getAvailableFontFamilyNames();
//        if(fontNames != null) {
//            for(int i = 0; i < fontNames.length; i++) {
//                fuentesComboBox.addItem(fontNames[i]);
//            }
//        }
    }
    
    private void cargarColorChooser() {
        //JColorChooser selec = new JColorChooser();
        //selec.setCursor(new Cursor(Cursor.HAND_CURSOR));

        Color color = JColorChooser.showDialog(null, "Selecciona un color", Color.BLACK);
        setTextColor(color);
    }
    
    private void agregarElementoParrafo() {
        try {
            int position = diagnosticoEditorPane.getCaretPosition();
            String html = diagnosticoEditorPane.getText();
            
            if(position > 0) {
                System.out.println("Es");
            }
//            String sel = diagnosticoEditorPane.getSelectedText();
//            Document doc = Jsoup.parse(html);
//            if(sel != null && sel.trim().length() > 0) {
//                Elements ele = doc.getElementsContainingOwnText(sel);
//                if(ele != null) {
//                    for(Element el : ele) {
//                        String colorRGB = "color:rgb(" + color.getRed() + ", " + color.getGreen() + ", " + color.getBlue() + ")";
//                        el.attr("style", colorRGB);                                
//                    }
//                }
//            }
//            diagnosticoEditorPane.setText(doc.html());
           
            //diagnosticoEditorPane.updateUI();
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void setTextColor(Color color) {
        try {
            String html = diagnosticoEditorPane.getText();
            String sel = diagnosticoEditorPane.getSelectedText();
            diagnosticoEditorPane.getSelectionStart();
            diagnosticoEditorPane.getSelectionEnd();
            
            Document doc = Jsoup.parse(html);
            
            if(sel != null && sel.trim().length() > 0) {
                Elements ele = doc.getElementsContainingOwnText(sel);
                if(ele != null) {
                    for(Element el : ele) {
                        String colorRGB = " color:rgb(" + color.getRed() + ", " + color.getGreen() + ", " + color.getBlue() + ");";
                        
                        if(el.hasAttr("style")) {
                            for(Attribute atr : el.attributes()) {
                                String v = atr.getValue();
                                
                                if(v.toLowerCase().contains("color:rgb")) {
                                    String[] arrayval = v.split(" ");
                                    StringBuilder nvsb = new StringBuilder();
                                    for(int i = 0; i < arrayval.length; i++) {
                                        if(arrayval[i].toLowerCase().contains("color:rgb")) {
                                            nvsb.append("");
                                        } else {
                                            nvsb.append(" ");
                                            nvsb.append(arrayval[i]);
                                        }
                                    }
                                    atr.setValue(nvsb.toString());
                                } else {
                                    String nv = atr.getValue() + colorRGB;
                                    atr.setValue(nv);
                                }                                 
                            }
                        } else {
                            el.attr("style", colorRGB);
                        }
                    }
                }
            }
            String ejem = doc.html();
            diagnosticoEditorPane.setText(ejem);
           
            //diagnosticoEditorPane.updateUI();
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void alignText(AlignEnum align) {
        try {
            String html = diagnosticoEditorPane.getText();
            URL html2 = diagnosticoEditorPane.getPage();
            String sel = diagnosticoEditorPane.getSelectedText();
            Document doc = Jsoup.parse(html);
            if(sel != null && sel.trim().length() > 0) {
                Elements ele = doc.getElementsContainingOwnText(sel);
                if(ele != null) {
                    for(Element el : ele) { 
     
                        if(align.equals(AlignEnum.CENTER)) {
                            if(el.hasAttr("style")) {
                                for(Attribute atr : el.attributes()) {
                                    String v = atr.getValue();
                                    if(v.toLowerCase().contains("text-align:center;")) {
                                        String nv = v.replace("text-align:center;", "");
                                        atr.setValue(nv);
                                    } else {
                                        String nv = atr.getValue() + " text-align:center;";
                                        atr.setValue(nv);
                                    }                                 
                                }
                            } else {
                                el.attr("style", " text-align:center;");
                            }
                        }
                        if(align.equals(AlignEnum.LEFT)) {
                            if(el.hasAttr("style")) {
                                for(Attribute atr : el.attributes()) {
                                    String v = atr.getValue();
                                    if(v.toLowerCase().contains("text-align:left;")) {
                                        String nv = v.replace("text-align:left;", "");
                                        atr.setValue(nv);
                                    } else {
                                        String nv = atr.getValue() + " text-align:left;";
                                        atr.setValue(nv);
                                    }                                 
                                }
                            } else {
                                el.attr("style", " text-align:left;");
                            }
                        }
                        if(align.equals(AlignEnum.RIGHT)) {
                            if(el.hasAttr("style")) {
                                for(Attribute atr : el.attributes()) {
                                    String v = atr.getValue();
                                    if(v.toLowerCase().contains("text-align:right;")) {
                                        String nv = v.replace("text-align:right;", "");
                                        atr.setValue(nv);
                                    } else {
                                        String nv = atr.getValue() + " text-align:right;";
                                        atr.setValue(nv);
                                    }                                 
                                }
                            } else {
                                el.attr("style", " text-align:right;");
                            }
                        }        
                    }
                }
            }
            //System.out.println(doc.html());
            //System.out.println("");
            String ejem = doc.html();
            diagnosticoEditorPane.setText(ejem);
           
            //diagnosticoEditorPane.updateUI();
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void setTextStyle(String estilo) {
        try {
            String html = diagnosticoEditorPane.getText();
            String sel = diagnosticoEditorPane.getSelectedText();
            Document doc = Jsoup.parse(html);
            if(sel != null && sel.trim().length() > 0) {
                Elements ele = doc.getElementsContainingOwnText(sel);
                if(ele != null) {
                    for(Element el : ele) {
                        
                        switch (estilo) {
                            case "negrita":
                                if(el.hasAttr("style")) {
                                    for(Attribute atr : el.attributes()) {
                                        String v = atr.getValue();
                                        if(v.toLowerCase().contains("font-weight:bold;")) {
                                            String nv = v.replace("font-weight:bold;", "");
                                            atr.setValue(nv);
                                        } else {
                                            String nv = atr.getValue() + " font-weight:bold;";
                                            atr.setValue(nv);
                                        }                                 
                                    }
                                } else {
                                    el.attr("style", " font-weight:bold;");
                                }  
                                
                                break;
                            case "cursiva":
                                if(el.hasAttr("style")) {
                                    for(Attribute atr : el.attributes()) {
                                        String v = atr.getValue();
                                        if(v.toLowerCase().contains("font-style:italic;")) {
                                            String nv = v.replace("font-style:italic;", "");
                                            atr.setValue(nv);
                                        } else {
                                            String nv = atr.getValue() + " font-style:italic;";
                                            atr.setValue(nv);
                                        }                                 
                                    }
                                } else {
                                    el.attr("style", " font-style:italic;");
                                }
                                break;
                            case "subrayado":
                                if(el.hasAttr("style")) {
                                    for(Attribute atr : el.attributes()) {
                                        String v = atr.getValue();
                                        if(v.toLowerCase().contains("text-decoration:underline;")) {
                                            String nv = v.replace("text-decoration:underline;", "");
                                            atr.setValue(nv);
                                        } else {
                                            String nv = atr.getValue() + " text-decoration:underline;";
                                            atr.setValue(nv);
                                        }                                 
                                    }
                                } else {
                                    el.attr("style", " text-decoration:underline;");
                                }
                                break;
                            default:
                                break;
                        }
                                
                    }
                }
            }
            //System.out.println(doc.html());
            //System.out.println("");
            String ejem = doc.html();
            diagnosticoEditorPane.setText(ejem);
           
            //diagnosticoEditorPane.updateUI();
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void resizeText(double tamano) {
        try {
            
            String html = diagnosticoEditorPane.getText();
            String sel = diagnosticoEditorPane.getSelectedText();
            Document doc = Jsoup.parse(html);
            if(sel != null && sel.trim().length() > 0) {
                Elements ele = doc.getElementsContainingOwnText(sel);
                if(ele != null) {
                    
                    for(Element el : ele) {
                        String fs = " font-size:" + tamano + "pt;";
                        if(el.hasAttr("style")) {
                            for(Attribute atr : el.attributes()) {
                                String v = atr.getValue();
                                if (v.toLowerCase().contains("font-size:")) {
                                
                                    String[] arrayval = v.split(" ");
                                    StringBuilder nvsb = new StringBuilder();
                                    for(int i = 0; i < arrayval.length; i++) {
                                        if(arrayval[i].toLowerCase().contains("font-size:")) {
                                            nvsb.append("");
                                        } else {
                                            nvsb.append(" ");
                                            nvsb.append(arrayval[i]);
                                        }
                                    }
                                    atr.setValue(nvsb.toString());
                                } else {
                                    String nv = atr.getValue() + fs;
                                    atr.setValue(nv);
                                }                                                                                         
                            }
                        } else {
                            el.attr("style", fs);
                        }
                    
                    }
                }
            }
            //System.out.println(doc.html());
            //System.out.println("");
            String ejem = doc.html();
            diagnosticoEditorPane.setText(ejem);
            //diagnosticoEditorPane.updateUI();
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void cargarArchivoWord() {
        JFileChooser archivoSelec = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de word", "doc", "docx");
        archivoSelec.setFileFilter(filtro);
        archivoSelec.setLocation(10, 10);
        archivoSelec.setName("Seleccionar archivo de word");
        archivoSelec.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivoSelec.setCursor(new Cursor(Cursor.HAND_CURSOR));

        int estado = archivoSelec.showOpenDialog(this);

        if (estado == JFileChooser.APPROVE_OPTION) {

            try {

                leerArchivo(archivoSelec.getSelectedFile());

            } catch (NullPointerException ex2) {
                JOptionPane.showMessageDialog(this, "El archivo seleccionado no es el correcto", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                //setImagenDefecto();
            } catch (Exception ex3) {
                JOptionPane.showMessageDialog(this, "imagen: " + ex3, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                //setImagenDefecto();
            }
        }
    }
    
    public void leerArchivo(File archivoSelec) {

        try  {
         
            StringBuilder textoCompleto = new StringBuilder();
            textoCompleto.append("<!DOCTYPE html>\n" +
                        "<html lang=\"en\">\n" +
                        "<meta charset=\"UTF-8\">\n" +
                        "<title>Document</title>\n" +
                        "<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n" +
                        "<body>\n");
            
 
            InputStream inp = new FileInputStream(archivoSelec);
            if (inp != null) {
                XWPFDocument doc = new XWPFDocument(inp);
                XWPFWordExtractor extrac = new XWPFWordExtractor(doc);
                if(extrac != null) {
                    for(XWPFParagraph parrafo : extrac.getDocument().getParagraphs()) {

                        textoCompleto.append("<p");
                        
                        textoCompleto.append(" style=\"");
                                
                        if(parrafo.getAlignment() != null && parrafo.getAlignment().getValue() == ParagraphAlignment.CENTER.getValue()){
                            textoCompleto.append("text-align:center; ");
                        } else if (parrafo.getAlignment() != null && parrafo.getAlignment().getValue() == ParagraphAlignment.LEFT.getValue()) {
                            textoCompleto.append("text-align:left; ");
                        } else if (parrafo.getAlignment() != null && parrafo.getAlignment().getValue() == ParagraphAlignment.RIGHT.getValue()) {
                            textoCompleto.append("text-align:right; ");
                        }
                        
                        textoCompleto.append("\"");
                        textoCompleto.append(">");
                        for(XWPFRun run : parrafo.getRuns()) {
                            
                            try {
                                
                                textoCompleto.append("<span");     

                                
                                String colorRGB = (run.getColor() != null ? "color:#" + run.getColor() + "; " : "");                  
                                String ff = (run.getFontFamily() != null ? "font-family:" + run.getFontFamily() + "; " : "");
                                String bold = (run.isBold() ? "font-weight:bold; " : "");
                                String italic = (run.isItalic() ? "font-style:italic; " : "");
                                
                                String underline = "";
                                int underlineValue = (run.getUnderline() != null ? run.getUnderline().getValue() : 0);
                                if (underlineValue != UnderlinePatterns.NONE.getValue()) {
                                   underline = "text-decoration:underline; ";  
                                }
                                String fontSize = (run.getFontSizeAsDouble() != null ? "font-size:" + run.getFontSizeAsDouble() + "pt; " : ""); 
                                
                                textoCompleto.append(" style=\"");
                                String aux = colorRGB + " " + ff + " " + bold + " " + italic + " " + underline + " " + fontSize;
                                textoCompleto.append(aux);
                                textoCompleto.append("\"");
                                textoCompleto.append(">");
            
                                String text = run.toString();
                                textoCompleto.append(text);
                                textoCompleto.append("</span>");
                                //break;
                            } catch(Exception ex) {
                                ex.printStackTrace();
                            } 

                        }
                        
                        //textoCompleto.append("\" >");
                        //String val = parrafo.getText();
                        //textoCompleto.append(val);
                        textoCompleto.append("</p>");

                    }
                }

                textoCompleto.append("</body>\n" +
                            "</html>");

                //FileReader archivos=new FileReader(archivo);
                //BufferedReader lee = new BufferedReader(archivos);
                //while((aux = lee.readLine())!=null) {
                //   texto+= aux+ "\n";
                //}
                //lee.close();

                diagnosticoEditorPane.setText(textoCompleto.toString());            
                inp.close();
            }
            
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaneEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaneEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaneEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaneEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PaneEditorFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AceptarButton;
    private javax.swing.JMenu alineadoMenu;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JButton centerAButton;
    private javax.swing.JMenuItem centroMenuItem;
    private javax.swing.JButton colorButton;
    private javax.swing.JMenuItem colorMenuItem;
    private javax.swing.JButton cursivaButton;
    private javax.swing.JMenuItem cursivaMenuItem;
    private javax.swing.JMenuItem derMenuItem;
    private javax.swing.JEditorPane diagnosticoEditorPane;
    private javax.swing.JPopupMenu editorPopupMenu;
    private javax.swing.JMenu estiloTextoMenu;
    private javax.swing.JMenuItem izqMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton leftAButton;
    private javax.swing.JButton negritaButton;
    private javax.swing.JButton negritaButton1;
    private javax.swing.JMenuItem negritaMenuItem;
    private javax.swing.JButton rightAButton;
    private javax.swing.JButton seleccionarButton;
    private javax.swing.JMenuItem size10MenuItem;
    private javax.swing.JMenuItem size11MenuItem;
    private javax.swing.JMenuItem size12MenuItem;
    private javax.swing.JMenuItem size13MenuItem;
    private javax.swing.JMenuItem size14MenuItem;
    private javax.swing.JMenuItem size15MenuItem;
    private javax.swing.JMenuItem size16MenuItem;
    private javax.swing.JMenuItem size17MenuItem;
    private javax.swing.JMenuItem size18MenuItem;
    private javax.swing.JMenuItem size19MenuItem;
    private javax.swing.JMenuItem size20MenuItem;
    private javax.swing.JMenuItem size8MenuItem;
    private javax.swing.JMenuItem size9MenuItem;
    private javax.swing.JMenu sizeMenu;
    private javax.swing.JButton subrayadoButton;
    private javax.swing.JMenuItem subrayadoMenuItem;
    private javax.swing.JComboBox<String> tamanhoTextoComboBox;
    // End of variables declaration//GEN-END:variables
}
